// <auto-generated />
using System;
using System.Collections.Generic;
using HomeStorageApp.Drugs.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HomeStorageApp.Drugs.Persistence.Migrations
{
    [DbContext(typeof(DrugsDbContext))]
    partial class DrugsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HomeStorageApp.Drugs.Core.Domain.Drugs.DerivedUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseUnitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConversionFactor")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefaultPurchaseUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<List<string>>("_barcodes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("barcodes");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId")
                        .HasDatabaseName("ix_derived_units_base_unit_id");

                    b.HasIndex("DrugId")
                        .HasDatabaseName("ix_derived_units_drug_id");

                    b.HasIndex("DrugId", "IsDefaultPurchaseUnit")
                        .HasDatabaseName("ix_derived_units_drug_id_is_default");

                    b.HasIndex("DrugId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_derived_units_drug_id_name_unique");

                    b.ToTable("derived_units", (string)null);
                });

            modelBuilder.Entity("HomeStorageApp.Drugs.Core.Domain.Drugs.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PrimaryUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("_barcodes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("barcodes");

                    b.HasKey("Id");

                    b.HasIndex("IsArchived")
                        .HasDatabaseName("ix_drugs_is_archived");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_drugs_name");

                    b.HasIndex("PrimaryUnitId")
                        .HasDatabaseName("ix_drugs_primary_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_drugs_user_id");

                    b.HasIndex("UserId", "IsArchived")
                        .HasDatabaseName("ix_drugs_user_id_is_archived");

                    b.ToTable("drugs", (string)null);
                });

            modelBuilder.Entity("HomeStorageApp.Drugs.Core.Domain.SystemUnits.SystemUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_system_units_category");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_system_units_name");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("ix_system_units_symbol");

                    b.ToTable("system_units", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Category = "Piece",
                            Name = "tabletka",
                            Symbol = "tab"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Category = "Piece",
                            Name = "kapsułka",
                            Symbol = "kaps"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Category = "Piece",
                            Name = "sztuka",
                            Symbol = "szt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Category = "Piece",
                            Name = "dawka",
                            Symbol = "daw"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Category = "Volume",
                            Name = "mililitr",
                            Symbol = "ml"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Category = "Volume",
                            Name = "litr",
                            Symbol = "l"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Category = "Volume",
                            Name = "kropla",
                            Symbol = "kr"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Category = "Weight",
                            Name = "miligram",
                            Symbol = "mg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Category = "Weight",
                            Name = "gram",
                            Symbol = "g"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Category = "Weight",
                            Name = "kilogram",
                            Symbol = "kg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Category = "Other",
                            Name = "saszetka",
                            Symbol = "sasz"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            Category = "Other",
                            Name = "ampułka",
                            Symbol = "amp"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            Category = "Other",
                            Name = "fiolka",
                            Symbol = "fiol"
                        });
                });

            modelBuilder.Entity("HomeStorageApp.Drugs.Core.Domain.Drugs.DerivedUnit", b =>
                {
                    b.HasOne("HomeStorageApp.Drugs.Core.Domain.Drugs.Drug", "Drug")
                        .WithMany("DerivedUnits")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("HomeStorageApp.Drugs.Core.Domain.Drugs.Drug", b =>
                {
                    b.HasOne("HomeStorageApp.Drugs.Core.Domain.SystemUnits.SystemUnit", "PrimaryUnit")
                        .WithMany()
                        .HasForeignKey("PrimaryUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrimaryUnit");
                });

            modelBuilder.Entity("HomeStorageApp.Drugs.Core.Domain.Drugs.Drug", b =>
                {
                    b.Navigation("DerivedUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
